
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    client_max_body_size 1024m;

    #gzip  on;

     server {
        listen 80;
        server_name http://127.0.0.1;
        location / {
            proxy_pass http://127.0.0.1:9500;
            # 指定允许跨域的方法，*代表所有
            add_header Access-Control-Allow-Methods POST,GET,OPTIONS,PUT,DELETE;
            # 预检命令的缓存，如果不缓存每次会发送两次请求
            add_header Access-Control-Max-Age 3600;
            # 带cookie请求需要加上这个字段，并设置为true
            add_header Access-Control-Allow-Credentials true;
            # 表示允许这个域跨域调用（客户端发送请求的域名和端口）
            # $http_origin动态获取请求客户端请求的域 不用*的原因是带cookie的请求不支持*号
            add_header Access-Control-Allow-Origin $http_origin;
            # 表示请求头的字段 动态获取
            add_header Access-Control-Allow-Headers
            $http_access_control_request_headers;
            # OPTIONS预检命令，预检命令通过时才发送请求
            # 检查请求的类型是不是预检命令
            if ($request_method = OPTIONS){
             return 200;
            }
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
